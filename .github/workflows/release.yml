name: Release Pipeline

on:
  workflow_dispatch:

env:
  REGISTRY: cr.yandex
  APP_NAME: app

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install system tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl gnupg
          
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin
          
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Configure YC CLI
        run: |
          echo '${{ secrets.YC_SA_KEY }}' > key.json
          
          if ! jq empty key.json; then
            echo "::error::Invalid service account key JSON"
            exit 1
          fi
          
          yc config set service-account-key key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
          
          if ! yc iam service-account get $(yc config get service-account-id); then
            echo "::error::Failed to access service account"
            exit 1
          fi
          
          rm -f key.json

      - name: Docker Login
        run: |
          IAM_TOKEN=$(yc iam create-token)
        
          if [ -z "$IAM_TOKEN" ]; then
            echo "::error::Failed to get IAM token"
            exit 1
          fi
          
          echo "$IAM_TOKEN" | docker login \
            --username iam \
            --password-stdin \
            ${{ env.REGISTRY }}
          
          if ! cat ~/.docker/config.json | grep -q "${{ env.REGISTRY }}"; then
            echo "::error::Docker login failed"
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Run checks
        run: |
          npm run lint
          npm run test
          npm run build

      - name: Build and push Docker image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.APP_NAME }}:${{ github.run_number }} \
            -t ${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.APP_NAME }}:latest \
            --push .
          
          if ! yc container image list --repository-name=${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.APP_NAME }} | grep -q ${{ github.run_number }}; then
            echo "::error::Image push failed"
            exit 1
          fi

      - name: Create release branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b release/v${{ github.run_number }}
          git push origin release/v${{ github.run_number }}

      - name: Create version tag
        run: |
          git tag -a v${{ github.run_number }} -m "Release v${{ github.run_number }}"
          git push origin v${{ github.run_number }}

      - name: Update changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges | sed 's/^/- /')
          else
            COMMITS=$(git log $PREV_TAG..HEAD --oneline --no-merges | sed 's/^/- /')
          fi
          
          echo -e "## v${{ github.run_number }} ($(date '+%Y-%m-%d'))\n\n$COMMITS\n\n$(cat CHANGELOG.md 2>/dev/null || echo '# Changelog')" > CHANGELOG.md
          
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v${{ github.run_number }}"
          git push

      - name: Create release issue
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 || echo "initial")
          COMMITS=$(git log $PREV_TAG..HEAD --oneline --no-merges | sed 's/^/- /')
          
          gh issue create \
            --title "Release v${{ github.run_number }}" \
            --body "### Release Information
            - **Version**: v${{ github.run_number }}
            - **Date**: $(date '+%Y-%m-%d %H:%M:%S')
            - **Author**: ${{ github.actor }}
            - **Docker Image**: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.APP_NAME }}:${{ github.run_number }}
            
            ### Changes
            $COMMITS
            
            ### Deployment
            \`\`\`bash
            docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{ env.APP_NAME }}:${{ github.run_number }}
            \`\`\`"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}