name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Configure YC and Docker auth
        run: |
          echo '${{ secrets.YC_SA_KEY }}' > key.json
          jq empty key.json || exit 1
          yc config set service-account-key key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
          
          # Получаем IAM токен через сервисный аккаунт
          IAM_TOKEN=$(curl -s -H "Metadata-Flavor: Google" "http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/token" | jq -r .access_token)
          [ -z "$IAM_TOKEN" ] && exit 1
          
          # Логинимся в Docker Registry
          echo "$IAM_TOKEN" | docker login --username iam --password-stdin cr.yandex
          
          # Проверяем успешность аутентификации
          cat ~/.docker/config.json | grep "cr.yandex" || exit 1
          rm -f key.json

      - name: Install project dependencies
        run: npm ci --legacy-peer-deps

      - name: Run checks
        run: |
          npm run lint
          npm run test

      - name: Create release branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b releases/v${{ github.run_number }}
          git push origin releases/v${{ github.run_number }}

      - name: Build and push Docker image
        run: |
          # Собираем образ
          docker build -t cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }} .
          
          # Добавляем тег latest
          docker tag cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }} cr.yandex/${{ secrets.REGISTRY_ID }}/app:latest
          
          # Пушим оба тега
          docker push cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }}
          docker push cr.yandex/${{ secrets.REGISTRY_ID }}/app:latest
          
          # Проверяем что образы появились в реестре
          yc container image list --repository-name=cr.yandex/${{ secrets.REGISTRY_ID }}/app | grep ${{ github.run_number }} || exit 1

      - name: Create version tag
        run: |
          git tag v${{ github.run_number }}
          git push origin v${{ github.run_number }}

      - name: Update changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 || echo "")
          [ -z "$PREV_TAG" ] && COMMITS=$(git log --oneline --no-merges | sed 's/^/- /') || COMMITS=$(git log $PREV_TAG..HEAD --oneline --no-merges | sed 's/^/- /')
          echo "## v${{ github.run_number }} ($(date +%Y-%m-%d))" > CHANGELOG.new
          echo "$COMMITS" >> CHANGELOG.new
          cat CHANGELOG.md >> CHANGELOG.new 2>/dev/null || true
          mv CHANGELOG.new CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG"
          git push

      - name: Create release issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 || echo "initial")
          COMMITS=$(git log $PREV_TAG..HEAD --oneline --no-merges | sed 's/^/- /')
          gh issue create --title "Release v${{ github.run_number }}" --body "Version: ${{ github.run_number }}\n\nChanges:\n$COMMITS\n\nImage: cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }}"