name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          export PATH="$HOME/yandex-cloud/bin:$PATH"

      - name: Configure YC and Docker auth
        run: |
          echo '${{ secrets.YC_SA_KEY }}' > key.json
          
          jq empty key.json || (echo "Invalid JSON!"; exit 1)
          
          yc config set service-account-key key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
          
          IAM_TOKEN=$(yc iam create-token)
          
          echo $IAM_TOKEN | docker login \
            --username iam \
            --password-stdin \
            cr.yandex
          
          cat ~/.docker/config.json
          
          rm -f key.json

      - name: Run lint and tests
        run: |
          npm ci
          npm run lint
          npm run test

      - name: Create release branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}

      - name: Build and push Docker image
        run: |
          docker build -t cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }} .
          
          docker tag cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }} cr.yandex/${{ secrets.REGISTRY_ID }}/app:latest
          
          docker push cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }}
          docker push cr.yandex/${{ secrets.REGISTRY_ID }}/app:latest
          
          yc container image list --repository-name=cr.yandex/${{ secrets.REGISTRY_ID }}/app

      - name: Create tag
        run: |
          git tag v${{ github.run_number }}
          git push origin v${{ github.run_number }}

      - name: Create release issue
        run: |
          COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --oneline | sed 's/^/- /')
          
          gh issue create \
            --title "Release v${{ github.run_number }}" \
            --body "Release details:
            - Date: $(date)
            - Author: ${{ github.actor }}
            - Version: ${{ github.run_number }}
            - Docker image: cr.yandex/${{ secrets.REGISTRY_ID }}/app:${{ github.run_number }}
            - Commits since last release:
            $COMMITS"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}